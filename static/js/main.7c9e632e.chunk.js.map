{"version":3,"sources":["features/calculator/button.js","features/calculator/calculatorSlice.js","features/calculator/Calculator.js","features/calculator/result.js","features/calculator/resultRow.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Button","label","height","handleClick","style","className","onClick","calculatorSlice","createSlice","name","initialState","result","reducers","setResult","state","action","payload","del","clr","actions","selectResult","expression","calculator","Calculator","useState","setExpression","useSelector","dispatch","useDispatch","handleDefault","value","event","target","innerHTML","ans","eval","err","undefined","str","substr","length","display","border","width","justifyContent","Result","background","color","fontSize","type","readOnly","ResultRow","props","App","store","configureStore","reducer","calculatorReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c9e632e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./button.css\";\nconst Button = ({ label, height, handleClick }) => {\n  return (\n    <>\n      <button\n        style={{ height: height ? height : \"50px\" }}\n        className=\"btn\"\n        onClick={handleClick}\n      >\n        {label}\n      </button>\n    </>\n  );\n};\nexport default Button;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  result: \"\",\n};\n\nexport const calculatorSlice = createSlice({\n  name: \"calculator\",\n  initialState,\n  reducers: {\n    setResult: (state, action) => {\n      state.result = action.payload;\n    },\n    del: (state) => {\n      state.result = \"\";\n    },\n    clr: (state, action) => {\n      state.result = action.payload;\n    },\n  },\n});\nexport const { setResult, del, clr, expression } = calculatorSlice.actions;\nexport const selectResult = (state) => state.calculator.result;\n\nexport default calculatorSlice.reducer;\n","import React, { useState } from \"react\";\nimport ResultRow from \"./resultRow\";\nimport Button from \"./button\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { setResult, del, selectResult } from \"./calculatorSlice\";\nconst Calculator = () => {\n  const [expression, setExpression] = useState(\"\");\n  // const [result, setResult] = useState(\"\");\n  // useEffect(() => {}, [expression, result]);\n  const result = useSelector(selectResult);\n  const dispatch = useDispatch();\n  const handleDefault = (value) => {\n    if (result) {\n      // getting result valu for further calculation\n      let exp = result;\n      setExpression(result + value);\n      dispatch(setResult(\"\"));\n    } else {\n      let exp = expression;\n      setExpression(expression + value);\n    }\n  };\n  const handleClick = (event) => {\n    // get the value from the target element (button)\n    const value = event.target.innerHTML;\n    switch (value) {\n      case \"=\": {\n        // if it's an equal sign, use the eval module\n        // to evaluate the expression ,convert the result\n        // (in number) to String\n        if (expression !== \"\") {\n          var ans = \"\";\n          try {\n            ans = eval(expression);\n          } catch (err) {\n            dispatch(setResult(\"Math Error\"));\n          }\n          if (ans === undefined) dispatch(setResult(\"Math Error\"));\n          // update result in our state.\n          else {\n            // setResult(ans);\n            // setExpression(\"\");\n            dispatch(setResult(ans));\n            setExpression(\"\");\n          }\n        }\n        break;\n      }\n      case \"Clr\": {\n        // if it's the Clears sign, just clean our\n        // expression and result in the state\n        // setResult(\"\");\n        dispatch(del(\"\"));\n        setExpression(\"\");\n        break;\n      }\n      case \"Del\": {\n        var str = expression;\n        str = str.substr(0, str.length - 1);\n        setExpression(str);\n        break;\n      }\n      default: {\n        // for every other command, update the answer in the state\n        handleDefault(value);\n\n        break;\n      }\n    }\n  };\n\n  return (\n    <>\n      {/* expression and result will be display here */}\n      <ResultRow expression={expression} result={result} />\n      <div\n        style={{\n          display: \"flex\",\n          border: \"1px solid #747474\",\n          width: \"100%\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div>\n          <Button handleClick={handleClick} label={\"7\"} />\n          <Button handleClick={handleClick} label={\"4\"} />\n          <Button handleClick={handleClick} label={\"1\"} />\n          <Button handleClick={handleClick} label={\"0\"} />\n        </div>\n        <div>\n          <Button handleClick={handleClick} label={\"8\"} />\n          <Button handleClick={handleClick} label={\"5\"} />\n          <Button handleClick={handleClick} label={\"2\"} />\n          <Button handleClick={handleClick} label={\".\"} />\n        </div>\n        <div>\n          <Button handleClick={handleClick} label={\"9\"} />\n          <Button handleClick={handleClick} label={\"6\"} />\n          <Button handleClick={handleClick} label={\"3\"} />\n          <Button handleClick={handleClick} label={\"/\"} />\n\n          {/* <Button handleClick={handleClick} label={\"%\"} /> */}\n        </div>\n        <div>\n          <Button handleClick={handleClick} label={\"*\"} />\n          <Button handleClick={handleClick} label={\"-\"} />\n          <Button handleClick={handleClick} label={\"+\"} />\n          <Button handleClick={handleClick} label={\"Del\"} />\n        </div>\n        <div>\n          <Button handleClick={handleClick} label={\"Clr\"} />\n          <Button handleClick={handleClick} height=\"154px\" label={\"=\"} />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Calculator;\n","import React from \"react\";\n\nconst Result = ({ value, height }) => {\n  return (\n    <>\n      <input\n        style={{\n          border: 0,\n          width: \"100%\",\n          background: \"#585858\",\n          color: \"#fff\",\n          height: \"30px\",\n          fontSize: \"18px\",\n        }}\n        type=\"text\"\n        value={value}\n        readOnly\n      />\n    </>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\nimport Result from \"./result\";\n\nconst ResultRow = (props) => {\n  return (\n    <>\n      {/* user expression  */}\n      <Result value={props.expression} />\n      {/* result after calulation of expression */}\n      <Result value={props.result} />\n    </>\n  );\n};\n\nexport default ResultRow;\n","import React from \"react\";\nimport Calculator from \"./features/calculator/Calculator\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calculator />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport calculatorReducer from \"../features/calculator/calculatorSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    calculator: calculatorReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}